import { NextRequest, NextResponse } from 'next/server';
import dbConnect from '@/server/utils/dbConnect';
import Tag from '@/server/models/Tag';
import { adminAuthMiddleware } from '@/server/middleware/authMiddleware';

// GET all tags
export async function GET(req: NextRequest) {
  const authResult = await adminAuthMiddleware(req);
  if (authResult.error) {
    return NextResponse.json({ message: authResult.error }, { status: authResult.status });
  }

  try {
    await dbConnect();
    const tags = await Tag.find({}).sort({ createdAt: -1 });
    return NextResponse.json(tags, { status: 200 });
  } catch (error) {
    console.error('Error fetching tags:', error);
    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });
  }
}

// POST a new tag
export async function POST(req: NextRequest) {
  const authResult = await adminAuthMiddleware(req);
  if (authResult.error) {
    return NextResponse.json({ message: authResult.error }, { status: authResult.status });
  }

  try {
    await dbConnect();
    const body = await req.json();
    const { name } = body;

    if (!name || typeof name !== 'string' || name.trim() === '') {
      return NextResponse.json({ message: 'Tag name is required and must be a string.' }, { status: 400 });
    }

    // Slug is auto-generated by pre-save hook in the model
    // Model also handles unique slug check implicitly (mongoose unique index error)
    const newTag = new Tag({
      name: name.trim(),
    });

    await newTag.save();
    return NextResponse.json(newTag, { status: 201 });

  } catch (error: any) {
    console.error('Error creating tag:', error);
    if (error.name === 'ValidationError') {
      return NextResponse.json({ message: 'Validation Error', errors: error.errors }, { status: 400 });
    }
    // Mongoose unique index error for 'slug' (or 'name' if made unique)
    if (error.code === 11000) {
        const field = Object.keys(error.keyPattern || {})[0] || 'field';
        return NextResponse.json({ message: `A tag with this ${field} already exists.` }, { status: 409 });
    }
    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });
  }
}
