import { NextRequest, NextResponse } from 'next/server';
import dbConnect from '@/server/utils/dbConnect';
import Tag from '@/server/models/Tag';
import { adminAuthMiddleware } from '@/server/middleware/authMiddleware';
import mongoose from 'mongoose';

// GET a specific tag by ID
export async function GET(req: NextRequest, { params }: { params: { id: string } }) {
  const authResult = await adminAuthMiddleware(req);
  if (authResult.error) {
    return NextResponse.json({ message: authResult.error }, { status: authResult.status });
  }

  const { id } = params;
  if (!mongoose.Types.ObjectId.isValid(id)) {
    return NextResponse.json({ message: 'Invalid tag ID format.' }, { status: 400 });
  }

  try {
    await dbConnect();
    const tag = await Tag.findById(id);
    if (!tag) {
      return NextResponse.json({ message: 'Tag not found.' }, { status: 404 });
    }
    return NextResponse.json(tag, { status: 200 });
  } catch (error) {
    console.error(`Error fetching tag ${id}:`, error);
    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });
  }
}

// PUT (update) a specific tag by ID
export async function PUT(req: NextRequest, { params }: { params: { id: string } }) {
  const authResult = await adminAuthMiddleware(req);
  if (authResult.error) {
    return NextResponse.json({ message: authResult.error }, { status: authResult.status });
  }

  const { id } = params;
  if (!mongoose.Types.ObjectId.isValid(id)) {
    return NextResponse.json({ message: 'Invalid tag ID format.' }, { status: 400 });
  }

  try {
    await dbConnect();
    const body = await req.json();
    const { name } = body;

    if (!name || typeof name !== 'string' || name.trim() === '') {
      return NextResponse.json({ message: 'Tag name is required and must be a string.' }, { status: 400 });
    }
    
    // Slug is auto-updated by pre-save hook if name changes.
    // Mongoose unique index error for 'slug' will be caught below if name change results in duplicate slug.
    const updatedTag = await Tag.findByIdAndUpdate(
      id,
      { name: name.trim() }, // Slug will be regenerated by the model's pre-save hook
      { new: true, runValidators: true }
    );

    if (!updatedTag) {
      return NextResponse.json({ message: 'Tag not found for update.' }, { status: 404 });
    }
    return NextResponse.json(updatedTag, { status: 200 });

  } catch (error: any) {
    console.error(`Error updating tag ${id}:`, error);
    if (error.name === 'ValidationError') {
      return NextResponse.json({ message: 'Validation Error', errors: error.errors }, { status: 400 });
    }
    if (error.code === 11000) {
        const field = Object.keys(error.keyPattern || {})[0] || 'field';
        return NextResponse.json({ message: `A tag with this ${field} already exists.` }, { status: 409 });
    }
    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });
  }
}

// DELETE a specific tag by ID
export async function DELETE(req: NextRequest, { params }: { params: { id: string } }) {
  const authResult = await adminAuthMiddleware(req);
  if (authResult.error) {
    return NextResponse.json({ message: authResult.error }, { status: authResult.status });
  }

  const { id } = params;
  if (!mongoose.Types.ObjectId.isValid(id)) {
    return NextResponse.json({ message: 'Invalid tag ID format.' }, { status: 400 });
  }

  try {
    await dbConnect();
    
    // TODO: Consider implications if tag is assigned to products.
    // This would require importing Product model and checking.
    // For now, hard delete is implemented.
    // Example:
    // const productsWithTag = await Product.find({ tags: id });
    // if (productsWithTag.length > 0) {
    //   return NextResponse.json({ message: 'Cannot delete tag. It is assigned to products.' }, { status: 400 });
    // }

    const deletedTag = await Tag.findByIdAndDelete(id);

    if (!deletedTag) {
      return NextResponse.json({ message: 'Tag not found for deletion.' }, { status: 404 });
    }
    return NextResponse.json({ message: 'Tag deleted successfully.' }, { status: 200 });
  } catch (error) {
    console.error(`Error deleting tag ${id}:`, error);
    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });
  }
}
