import { NextRequest, NextResponse } from 'next/server';
import dbConnect from '@/server/utils/dbConnect';
import Category from '@/server/models/Category';
import { adminAuthMiddleware } from '@/server/middleware/authMiddleware';
import mongoose from 'mongoose';

// GET all categories
export async function GET(req: NextRequest) {
  const authResult = await adminAuthMiddleware(req);
  if (authResult.error) {
    return NextResponse.json({ message: authResult.error }, { status: authResult.status });
  }

  try {
    await dbConnect();
    // Fetch categories and populate parentCategory's name for easier display on frontend
    // Using .lean() for potentially better performance as we are modifying the objects
    const categories = await Category.find({})
      .populate<{ parentCategory: { _id: mongoose.Types.ObjectId; name: string } | null }>({
        path: 'parentCategory',
        select: 'name slug', // Select only name and slug of parent for brevity
      })
      .sort({ createdAt: -1 })
      .lean(); // Use lean for plain JS objects

    return NextResponse.json(categories, { status: 200 });
  } catch (error) {
    console.error('Error fetching categories:', error);
    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });
  }
}

// POST a new category
export async function POST(req: NextRequest) {
  const authResult = await adminAuthMiddleware(req);
  if (authResult.error) {
    return NextResponse.json({ message: authResult.error }, { status: authResult.status });
  }

  try {
    await dbConnect();
    const body = await req.json();
    const { name, parentCategory: parentCategoryId } = body;

    if (!name || typeof name !== 'string' || name.trim() === '') {
      return NextResponse.json({ message: 'Category name is required and must be a string.' }, { status: 400 });
    }

    const categoryData: { name: string; parentCategory?: mongoose.Types.ObjectId } = {
      name: name.trim(),
    };

    if (parentCategoryId) {
      if (!mongoose.Types.ObjectId.isValid(parentCategoryId)) {
        return NextResponse.json({ message: 'Invalid parent category ID format.' }, { status: 400 });
      }
      // Check if parent category exists
      const parentExists = await Category.findById(parentCategoryId);
      if (!parentExists) {
        return NextResponse.json({ message: 'Parent category not found.' }, { status: 404 });
      }
      categoryData.parentCategory = new mongoose.Types.ObjectId(parentCategoryId);
    }

    // Slug is auto-generated by pre-save hook in the model
    // Model also handles unique slug check implicitly (mongoose unique index error)
    // but we can add an explicit check for better error message if desired
    
    const newCategory = new Category(categoryData);
    await newCategory.save();
    
    // Populate parent category for the response if it exists
    // Need to fetch the saved document again to populate or use the instance method if available
    const populatedCategory = await Category.findById(newCategory._id)
      .populate<{ parentCategory: { _id: mongoose.Types.ObjectId; name: string } | null }>({
        path: 'parentCategory',
        select: 'name slug',
      })
      .lean();


    return NextResponse.json(populatedCategory, { status: 201 });

  } catch (error: any) {
    console.error('Error creating category:', error);
    if (error.name === 'ValidationError') {
      return NextResponse.json({ message: 'Validation Error', errors: error.errors }, { status: 400 });
    }
    // Mongoose unique index error for 'slug' (or 'name' if made unique)
    if (error.code === 11000) {
        // Extract field name from error message if possible
        const field = Object.keys(error.keyPattern || {})[0] || 'field';
        return NextResponse.json({ message: `A category with this ${field} already exists.` }, { status: 409 });
    }
    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });
  }
}
